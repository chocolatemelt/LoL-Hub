{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","streamers","Map","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","content","streamersRes","streamersArray","i","role","name","newStreamerEntry","wrap","_context","prev","next","setState","isLoading","axios","get","sent","data","length","toLowerCase","has","add","set","Set","fullContent","t0","console","log","stop","filterByContentType","selectedContentType","contentArray","filter","media","type","filterByRole","selectedRole","creatorName","render","state","renderLoading","renderResults","results","react_default","createElement","value","onChange","event","target","id","map","result","key","videoId","src","embedLink","height","width","frameBorder","scrolling","title","replace","createdAt","split","style","backgroundColor","logo","className","alt","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7a33f81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport { render } from 'react-dom';\n\ninterface ComponentState {\n  fullContent: Content[],\n  selectedContentType: string,\n  selectedRole: string,\n  isLoading: boolean\n}\n\ninterface Content {\n  type: string,\n  videoId: string,\n  title: string,\n  thumbnailUrl: string,\n  creatorName: string,\n  createdAt: string,\n  embedLink: string,\n  viewCount?: number,\n  redditInfo?: object,\n  videoClipInfo?: object,\n  upvotes?: number\n};\n\nlet streamers = new Map<String, Set<String>>();\n\nclass App extends Component<{}, ComponentState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      fullContent: [],\n      selectedContentType: 'all',\n      selectedRole: 'all',\n      isLoading: false\n    };\n  }\n\n  componentDidMount = async () => {\n    try {\n      this.setState({\n        isLoading: true\n      });\n      const res = await axios.get('http://localhost:1337/content');\n      const content = res.data.content;\n\n      const streamersRes = await axios.get('http://localhost:1337/streamers');\n      const streamersArray = streamersRes.data.streamers\n\n      // Populating Streamers Map..\n      for (let i = 0; i < streamersArray.length; i++) {\n        const role = streamersArray[i].role.toLowerCase();\n        const name = streamersArray[i].name.toLowerCase();\n        if (!streamers.has(role)) {\n          streamers.set(role, new Set([name]));\n        } else {\n          //https://github.com/microsoft/TypeScript/issues/9619\n          const newStreamerEntry = streamers.get(role)!.add(name);\n          streamers.set(role, newStreamerEntry);\n        }\n      }\n\n      this.setState({\n        fullContent: content,\n        isLoading: false\n      });\n\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  filterByContentType = (selectedContentType: string, contentArray: Content[]) => {\n    if (selectedContentType === 'all') {\n      return contentArray;\n    } else {\n      const result = contentArray.filter((media) => {\n        return media.type === selectedContentType;\n      });\n      return result;\n    }\n  }\n\n  filterByRole = (selectedRole: string, contentArray: Content[]) => {\n    if (selectedRole === 'all') {\n      return contentArray;\n    } else {\n      const result = contentArray.filter((media) => {\n        return streamers.get(selectedRole)!.has(media.creatorName.toLowerCase());\n      });\n      return result;\n    }\n  }\n\n  render = () => {\n    \n    if (this.state.isLoading) return this.renderLoading();\n\n    let contentArray = this.state.fullContent;\n    let selectedContentType = this.state.selectedContentType;\n    let selectedRole = this.state.selectedRole;\n\n    contentArray = this.filterByContentType(selectedContentType, contentArray);\n    contentArray = this.filterByRole(selectedRole, contentArray);\n\n    return this.renderResults(contentArray);\n    // return contentArray.length > 0 ?\n    //   this.renderResults(contentArray) :\n    //   this.renderLoading()\n  }\n\n  /* https://stackoverflow.com/questions/42217579/data-binding-in-react */\n  renderResults = (results: Content[]) => {\n    return (\n      <div>\n        <select name=\"selectedContentType\" value={this.state.selectedContentType} onChange={(event) => {\n            this.setState({selectedContentType: event.target.value});\n          }}>\n          <option value=\"all\">All</option>\n          <option value=\"youtube-video\">Youtube Video</option>\n          <option value=\"twitch-clip\">Twitch Clip</option>\n        </select>\n        <select name=\"selectedRole\" value={this.state.selectedRole} onChange={(event) => {\n          this.setState({selectedRole: event.target.value});\n        }}>\n          <option value =\"all\">All</option>\n          <option value=\"top\">top</option>\n          <option value=\"jg\">jg</option>\n          <option value=\"mid\">mid</option>\n          <option value=\"adc\">adc</option>\n          <option value=\"sup\">sup</option>\n        </select>        \n        <ul id=\"content_unordered_list\">\n          {results.map((result: Content) =>\n            <li key={result.videoId} >\n              <iframe\n                src={result.embedLink}\n                height=\"390\"\n                width=\"640\"\n                frameBorder=\"10\"\n                scrolling=\"no\">\n                allowFullScreen>\n              </iframe>\n              <h3>{result.title}</h3>\n              <ul id=\"content_unordered_list\">\n                <li>Creator: {result.creatorName}</li>\n                <li>Content Type: {result.type.replace('-',' ')}</li>\n                <li>Creation Date: {result.createdAt.split(':')[0]}</li>\n              </ul>                \n            </li>\n            )}\n        </ul>\n      </div>\n    );\n  }\n\n  renderLoading = () => {\n    return (\n      <div style={{backgroundColor: \"#141414\"}}>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//https://www.robinwieruch.de/react-fetching-data/\n//https://codepen.io/pjmtokyo/pen/ZGVjVV/\n//https://moduscreate.com/blog/ext-js-to-react-load-sort-and-filter-data-with-react/\n\n\n\n\n// referential transparancy\n// functional purity (pure functions)\n// Read up on these!!\n\n// React developer tools <-- get dis\n\n\n/*\nData Binding in React\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}